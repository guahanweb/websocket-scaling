{
    "env": {
        "browser": false,
        "es2021": true,
        "jest/globals": true
    },
    "extends": [
        "airbnb",
        "plugin:react/recommended",
        "plugin:wc/recommended",
        "prettier"
    ],
    "ignorePatterns": ["dist", "jest-setup.ts"],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaFeatures": {
            "jsx": true
        },
        "ecmaVersion": "latest",
        "sourceType": "module"
    },
    "plugins": ["react", "react-hooks", "@typescript-eslint", "jest", "import"],
    "rules": {
        "@typescript-eslint/ban-ts-comment": "warn",
        "@typescript-eslint/ban-types": "warn",
        "@typescript-eslint/no-empty-function": "off",
        "@typescript-eslint/no-this-alias": "warn",
        "@typescript-eslint/no-use-before-define": "error",
        "@typescript-eslint/no-var-requires": "off",
        "camelcase": "off",
        "class-methods-use-this": 0,
        "curly": ["error", "all"],
        "default-case": [
            "error",
            {
                "commentPattern": "^no default$"
            }
        ],
        "implicit-arrow-linebreak": ["error", "beside"],
        "import/extensions": 0,
        "import/no-cycle": [
            "off",
            {
                "maxDepth": null
            }
        ],
        "import/no-duplicates": ["off"],
        "import/no-dynamic-require": 0,
        "import/no-extraneous-dependencies": 0,
        "import/no-mutable-exports": 0,
        "import/no-named-as-default": ["off"],
        "import/no-named-as-default-member": ["off"],
        "import/no-self-import": ["off"],
        "import/no-unresolved": 0,
        "import/prefer-default-export": 0,
        "js-doc": "off",
        "jsx-a11y/alt-text": [
            "error",
            {
                "area": [],
                "elements": ["img", "object", "area", "input[type=image]"],
                "img": [],
                "input[type=image]": [],
                "object": []
            }
        ],
        "jsx-a11y/anchor-is-valid": [
            "error",
            {
                "aspects": ["noHref", "invalidHref", "preferButton"],
                "components": ["Link"],
                "specialLink": ["to"]
            }
        ],
        "jsx-a11y/aria-props": ["error"],
        "jsx-a11y/aria-proptypes": ["error"],
        "jsx-a11y/aria-unsupported-elements": ["error"],
        "jsx-a11y/click-events-have-key-events": ["error"],
        "jsx-a11y/html-has-lang": ["error"],
        "jsx-a11y/iframe-has-title": ["error"],
        "jsx-a11y/lang": ["error"],
        "jsx-a11y/mouse-events-have-key-events": ["error"],
        "jsx-a11y/no-access-key": ["error"],
        "jsx-a11y/no-noninteractive-element-interactions": [
            "error",
            {
                "handlers": [
                    "onClick",
                    "onMouseDown",
                    "onMouseUp",
                    "onKeyPress",
                    "onKeyDown",
                    "onKeyUp"
                ]
            }
        ],
        "jsx-a11y/no-noninteractive-tabindex": [
            "error",
            {
                "roles": ["tabpanel"],
                "tags": []
            }
        ],
        "jsx-a11y/no-onchange": ["error"],
        "jsx-a11y/no-static-element-interactions": [
            "error",
            {
                "handlers": [
                    "onClick",
                    "onMouseDown",
                    "onMouseUp",
                    "onKeyPress",
                    "onKeyDown",
                    "onKeyUp"
                ]
            }
        ],
        "jsx-a11y/role-has-required-aria-props": ["error"],
        "jsx-a11y/role-supports-aria-props": ["error"],
        "max-classes-per-file": ["off"],
        "max-len": [
            "error",
            {
                "code": 120,
                "ignoreComments": true,
                "ignoreRegExpLiterals": true,
                "ignoreStrings": true,
                "ignoreTemplateLiterals": true,
                "ignoreTrailingComments": true,
                "ignoreUrls": true
            }
        ],
        "new-cap": [
            2,
            {
                "capIsNewExceptions": [
                    "CollectionsHOC",
                    "CollectionsHOCComponent",
                    "SceneHOC",
                    "SlickSliderWrapperHOC",
                    ""
                ]
            }
        ],
        "newline-before-return": "error",
        "no-console": 0,
        "no-const-assign": 2,
        "no-dupe-class-members": ["error"],
        "no-empty": ["error"],
        "no-empty-function": 0,
        "no-extra-bind": 0,
        "no-lonely-if": ["error"],
        "no-mixed-operators": [
            "error",
            {
                "allowSamePrecedence": false,
                "groups": [
                    ["%", "**"],
                    ["%", "+"],
                    ["%", "-"],
                    ["%", "*"],
                    ["%", "/"],
                    ["/", "*"],
                    ["&", "|", "<<", ">>", ">>>"],
                    ["==", "!=", "===", "!=="],
                    ["&&", "||"]
                ]
            }
        ],
        "no-multi-assign": ["error"],
        "no-multiple-empty-lines": [
            "error",
            {
                "max": 2
            }
        ],
        "no-nested-ternary": ["error"],
        "no-prototype-builtins": ["error"],
        "no-restricted-globals": [
            "error",
            "isFinite",
            "isNaN",
            "addEventListener",
            "blur",
            "close",
            "closed",
            "confirm",
            "defaultStatus",
            "defaultstatus",
            "event",
            "external",
            "find",
            "focus",
            "frameElement",
            "frames",
            "history",
            "innerHeight",
            "innerWidth",
            "length",
            "location",
            "locationbar",
            "menubar",
            "moveBy",
            "moveTo",
            "name",
            "onblur",
            "onerror",
            "onfocus",
            "onload",
            "onresize",
            "onunload",
            "open",
            "opener",
            "opera",
            "outerHeight",
            "outerWidth",
            "pageXOffset",
            "pageYOffset",
            "parent",
            "print",
            "removeEventListener",
            "resizeBy",
            "resizeTo",
            "screen",
            "screenLeft",
            "screenTop",
            "screenX",
            "screenY",
            "scroll",
            "scrollbars",
            "scrollBy",
            "scrollTo",
            "scrollX",
            "scrollY",
            "self",
            "status",
            "statusbar",
            "stop",
            "toolbar",
            "top"
        ],
        "no-restricted-syntax": [
            "error",
            {
                "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array.",
                "selector": "ForInStatement"
            },
            {
                "message": "iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.",
                "selector": "ForOfStatement"
            },
            {
                "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand.",
                "selector": "LabeledStatement"
            },
            {
                "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize.",
                "selector": "WithStatement"
            }
        ],
        "no-return-assign": ["error", "always"],

        "no-return-await": ["error"],
        // @typescript-eslint/no-shadow is preferred
        "no-shadow": "off",
        "no-tabs": ["error"],
        "no-template-curly-in-string": "off",
        "no-unused-vars": [
            "warn",
            {
                "args": "after-used",
                "ignoreRestSiblings": true,
                "vars": "all"
            }
        ],
        // @typescript-eslint/no-use-before-define is preferred
        "no-use-before-define": "off",
        "no-useless-constructor": "error",
        "object-shorthand": "error",
        "padded-blocks": "off",
        "padding-line-between-statements": [
            "error",
            {
                "blankLine": "always",
                "next": "*",
                "prev": ["const", "let", "var"]
            },
            {
                "blankLine": "any",
                "next": ["const", "let", "var"],
                "prev": ["const", "let", "var"]
            }
        ],
        "prefer-const": "error",
        "prefer-promise-reject-errors": "off",
        "radix": "warn",
        "react-hooks/exhaustive-deps": "warn",
        "react-hooks/rules-of-hooks": "error",
        "react/display-name": 0,
        "react/forbid-prop-types": 0,
        "react/jsx-closing-tag-location": ["error"],
        "react/jsx-filename-extension": "off",
        "react/jsx-indent": "off",
        "react/jsx-indent-props": "off",
        "react/jsx-uses-vars": 1,
        "react/no-access-state-in-setstate": "off",
        "react/no-array-index-key": ["error"],
        "react/no-did-update-set-state": "off",
        "react/no-typos": ["error"],
        "react/no-unused-prop-types": [
            "error",
            {
                "customValidators": [],
                "skipShapeProps": true
            }
        ],
        "react/no-unused-state": ["error"],
        "react/prefer-stateless-function": [
            "error",
            {
                "ignorePureComponents": true
            }
        ],
        "react/prop-types": [
            1,
            {
                "customValidators": [],
                "ignore": [],
                "skipUndeclared": false
            }
        ],
        "react/react-in-jsx-scope": 0,
        "react/sort-comp": [
            "error",
            {
                "groups": {
                    "lifecycle": [
                        "displayName",
                        "propTypes",
                        "contextTypes",
                        "childContextTypes",
                        "mixins",
                        "statics",
                        "defaultProps",
                        "constructor",
                        "getDefaultProps",
                        "getInitialState",
                        "state",
                        "getChildContext",
                        "getDerivedStateFromProps",
                        "componentWillMount",
                        "UNSAFE_componentWillMount",
                        "componentDidMount",
                        "componentWillReceiveProps",
                        "UNSAFE_componentWillReceiveProps",
                        "shouldComponentUpdate",
                        "componentWillUpdate",
                        "UNSAFE_componentWillUpdate",
                        "getSnapshotBeforeUpdate",
                        "componentDidUpdate",
                        "componentDidCatch",
                        "componentWillUnmount"
                    ],
                    "rendering": ["/^render.+$/", "render"]
                },
                "order": [
                    "static-variables",
                    "static-methods",
                    "instance-variables",
                    "lifecycle",
                    "/^on.+$/",
                    "getters",
                    "setters",
                    "/^(get|set)(?!(InitialState$|DefaultProps$|ChildContext$)).+$/",
                    "instance-methods",
                    "everything-else",
                    "rendering"
                ]
            }
        ],
        "react/style-prop-object": 1,
        "semi-style": ["error", "last"],
        "sort-keys": "error",
        "valid-typeof": [
            "error",
            {
                "requireStringLiterals": true
            }
        ]
    },
    "settings": {
        "import/resolver": {
            "typescript": {
                "alwaysTryTypes": true,
                "project": ["packages/*/tsconfig.json"]
            }
        }
    }
}
